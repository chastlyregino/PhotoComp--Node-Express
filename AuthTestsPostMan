{
	"info": {
		"_postman_id": "19ebab56-5af3-41cd-9e59-2fb96b90b95f",
		"name": "PhotoComp API Auth",
		"description": "Collection for testing the authentication endpoints of the PhotoComp API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42793464"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Store token in environment variable for subsequent requests",
									"if (jsonData.data && jsonData.data.token) {",
									"    pm.environment.set(\"authToken\", jsonData.data.token);",
									"}",
									"",
									"// Test for successful registration (201 Created)",
									"pm.test(\"Status code is 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test for successful response structure",
									"pm.test(\"Response has the correct structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('success');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"    pm.expect(jsonData.data.user).to.be.an('object');",
									"    pm.expect(jsonData.data.token).to.be.a('string');",
									"});",
									"",
									"// Test that password is not returned in the response",
									"pm.test(\"Password is not returned in the response\", function() {",
									"    pm.expect(jsonData.data.user.password).to.be.undefined;",
									"});",
									"",
									"// Test that user data matches what was sent",
									"pm.test(\"User data matches registration data\", function() {",
									"    var requestData = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.data.user.email).to.eql(requestData.email);",
									"    pm.expect(jsonData.data.user.firstName).to.eql(requestData.firstName);",
									"    pm.expect(jsonData.data.user.lastName).to.eql(requestData.lastName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"Password123\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user with the system."
					},
					"response": []
				},
				{
					"name": "Register User - Existing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Test for conflict status code (409)",
									"pm.test(\"Status code is 409 for existing email\", function() {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test for error response structure",
									"pm.test(\"Response has the correct error structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('error');",
									"    pm.expect(jsonData.message).to.include('Email already in use');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"Password123\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Attempt to register a user with an email that already exists."
					},
					"response": []
				},
				{
					"name": "Register User - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Test for bad request status code (400)",
									"pm.test(\"Status code is 400 for invalid email\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test for error response structure",
									"pm.test(\"Response has the correct error structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('error');",
									"    pm.expect(jsonData.message).to.include('Invalid email format');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"invalid-email\",\n    \"password\": \"Password123\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Attempt to register a user with an invalid email format."
					},
					"response": []
				},
				{
					"name": "Register User - Weak Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Test for bad request status code (400)",
									"pm.test(\"Status code is 400 for weak password\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test for error response structure",
									"pm.test(\"Response has the correct error structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('error');",
									"    pm.expect(jsonData.message).to.include('at least 8 characters');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user2@example.com\",\n    \"password\": \"weak\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Attempt to register a user with a password that's too short."
					},
					"response": []
				},
				{
					"name": "Register User - Missing Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Test for bad request status code (400)",
									"pm.test(\"Status code is 400 for missing fields\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test for error response structure",
									"pm.test(\"Response has the correct error structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('error');",
									"    pm.expect(jsonData.message).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user3@example.com\",\n    \"firstName\": \"John\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Attempt to register a user with missing required fields."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Store token in environment variable for subsequent requests",
									"if (jsonData.data && jsonData.data.token) {",
									"    pm.environment.set(\"authToken\", jsonData.data.token);",
									"}",
									"",
									"// Test for successful login (200 OK)",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for successful response structure",
									"pm.test(\"Response has the correct structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('success');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"    pm.expect(jsonData.data.user).to.be.an('object');",
									"    pm.expect(jsonData.data.token).to.be.a('string');",
									"});",
									"",
									"// Test that password is not returned in the response",
									"pm.test(\"Password is not returned in the response\", function() {",
									"    pm.expect(jsonData.data.user.password).to.be.undefined;",
									"});",
									"",
									"// Test that user data matches what was expected",
									"pm.test(\"User email matches login credentials\", function() {",
									"    var requestData = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.data.user.email).to.eql(requestData.email);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Log in an existing user to get an auth token."
					},
					"response": []
				},
				{
					"name": "Login User - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Test for unauthorized status code (401)",
									"pm.test(\"Status code is 401 for invalid credentials\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test for error response structure",
									"pm.test(\"Response has the correct error structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('error');",
									"    pm.expect(jsonData.message).to.include('Invalid email or password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"WrongPassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Attempt to log in with incorrect password."
					},
					"response": []
				},
				{
					"name": "Login User - Non-Existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Test for unauthorized status code (401)",
									"pm.test(\"Status code is 401 for non-existent user\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test for error response structure",
									"pm.test(\"Response has the correct error structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('error');",
									"    pm.expect(jsonData.message).to.include('Invalid email or password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nonexistent@example.com\",\n    \"password\": \"Password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Attempt to log in with an email that doesn't exist in the system."
					},
					"response": []
				},
				{
					"name": "Login User - Missing Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response",
									"var jsonData = pm.response.json();",
									"",
									"// Test for bad request status code (400)",
									"pm.test(\"Status code is 400 for missing fields\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test for error response structure",
									"pm.test(\"Response has the correct error structure\", function() {",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.status).to.eql('error');",
									"    pm.expect(jsonData.message).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Attempt to log in with missing required fields."
					},
					"response": []
				},
				{
					"name": "Root Endpoint Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful status code (200 OK)",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test that the API server is running",
									"pm.test(\"API server is running\", function() {",
									"    pm.expect(pm.response.text()).to.include('PhotoComp API is running');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Check if the API server is running by accessing the root endpoint."
					},
					"response": []
				}
			],
			"description": "Auth operations for user registration and login."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default baseUrl if not already set",
					"if (!pm.environment.get(\"baseUrl\")) {",
					"    pm.environment.set(\"baseUrl\", \"http://localhost:3000\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}